name: Contracts

on:
  push:
    branches: [main, phase-1-foundations]
  pull_request:
    branches: [main, phase-1-foundations]

jobs:
  contracts:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Check for examples/schemas directory
        id: check_examples
        run: |
          if [ -d "examples" ] || [ -d "schemas" ]; then
            echo "examples_found=true" >> $GITHUB_OUTPUT
          else
            echo "examples_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Install ocn-common (if examples/schemas exist)
        if: steps.check_examples.outputs.examples_found == 'true'
        run: |
          # Try to install ocn-common as a submodule or via pip
          if [ -d "ocn-common" ]; then
            echo "Using ocn-common submodule"
            pip install -e ./ocn-common
          else
            echo "Installing ocn-common from git"
            pip install git+https://github.com/ahsanazmi1/ocn-common.git
          fi

      - name: Validate JSON examples against ocn-common
        if: steps.check_examples.outputs.examples_found == 'true'
        run: |
          echo "Validating JSON examples against ocn-common schemas..."
          python -c "
          import json
          import os
          from pathlib import Path

          # Find all JSON files in examples/ and schemas/
          json_files = []
          for dir_name in ['examples', 'schemas']:
              if os.path.exists(dir_name):
                  json_files.extend(Path(dir_name).rglob('*.json'))

          print(f'Found {len(json_files)} JSON files to validate')

          for json_file in json_files:
              try:
                  with open(json_file, 'r') as f:
                      json.load(f)
                  print(f'✅ {json_file} - Valid JSON')
              except json.JSONDecodeError as e:
                  print(f'❌ {json_file} - Invalid JSON: {e}')
                  exit(1)

          print('All JSON files are valid!')
          "

      - name: Placeholder validation (no examples/schemas found)
        if: steps.check_examples.outputs.examples_found == 'false'
        run: |
          echo "ℹ️  No examples/ or schemas/ directory found in this repository."
          echo "ℹ️  This is a placeholder validation that always passes."
          echo "ℹ️  Add examples/ or schemas/ directory with JSON files to enable ocn-common validation."
          echo "✅ Placeholder validation passed"

      - name: Validate MCP manifest
        run: |
          echo "Validating MCP manifest.json..."
          python -c "
          import json
          import os

          manifest_path = 'mcp/manifest.json'
          if os.path.exists(manifest_path):
              try:
                  with open(manifest_path, 'r') as f:
                      manifest = json.load(f)

                  # Basic validation
                  required_fields = ['name', 'version', 'capabilities', 'endpoints']
                  for field in required_fields:
                      if field not in manifest:
                          print(f'❌ Missing required field: {field}')
                          exit(1)

                  print('✅ MCP manifest.json is valid')
              except json.JSONDecodeError as e:
                  print(f'❌ Invalid JSON in manifest.json: {e}')
                  exit(1)
          else:
              print('ℹ️  No MCP manifest.json found')
          "
